#!/usr/bin/env node

'use strict';

const https = require('https');
const fs = require('fs-extra');
const request = require('request');
const child_process = require('child_process');
const yaml = require('js-yaml');
const path = require('path');

var download = function(url, dest) {
  return new Promise((resolve, reject) => {
    var file = fs.createWriteStream(dest);
    https.get(url, function(response) {
      response.pipe(file);
      file.on('finish', function() {
        file.close(resolve);  // close() is async, call resolve after close completes.
      });
    }).on('error', function(err) { // Handle errors
      fs.unlink(dest); // Delete the file async. (But we don't check the result)
      console.log(err.message);
      reject(err);
    });
  });
};

var get = function(url) {
  return new Promise(resolve => {
    request(url, { json: true }, (err, res, body) => {
      if (err) {
        return console.log(err);
      }
      resolve(body);
    });
  });
}

var makeDirIfNotExists = function(dir) {
  fs.ensureDirSync(dir);
}

async function cleanDistFolder(dir) {
  const files = await fs.readdir(dir);
  for (const file of files) {
    const filePath = path.join(dir, file);
    // Leave the wordpress directory, but delete its contents
    if (file === "wordpress") {
      await fs.emptyDir(filePath);
    } else {
      await fs.remove(filePath);
    }
  }
}

var unzip = function(filename, destinationDirectory) {
  console.log('- unzipping file: [' + filename + '] to directory: [' + destinationDirectory + ']');
  child_process.execSync('unzip "' + filename + '" -d "' + destinationDirectory + '"');
}

var copyFolder = function(sourceFolder, destinationFolder) {
  console.log('- copying folder from [' + sourceFolder + '] to [' + destinationFolder + ']');
  child_process.execSync('cp -r "' + sourceFolder + '" "' + destinationFolder + '"');
}



start();

async function start() {
  console.log('------------------------');
  console.log('-----  wp-install  -----');
  console.log('------------------------');
  console.log(''); // make some space in the log

  try {
    const config = readAndValidateConfigFile();
    await cleanFolders(config);
    await downloadWordPress(config);
    createWordPressContentFolders(config);
    await downloadPlugins(config);
    await copyPlugins(config);
    await copyCustomTheme(config);
  } catch (e) {
    console.log(''); // make some space in the log
    console.error(e);
    console.log('Script failed: ' + e.message);
  }
}


///////////
// CONFIG

function readAndValidateConfigFile() {
  const configFilename = './.wp-install.yml';
  console.log('reading config file [' + configFilename + ']');

  var wpInstallConfigString = fs.readFileSync(configFilename);
  var wpInstallConfig = yaml.safeLoad(wpInstallConfigString);

  validateConfigFile(wpInstallConfig);

  return wpInstallConfig;
}

function validateConfigFile(config) {
  if (!config['cache-folder']) {
    config['cache-folder'] = './.wordpress-download-cache';
  }

  if (!config['dist-folder']) {
    config['dist-folder'] = './dist';
  }
}


//////////
// CLEAN

async function cleanFolders(config) {
  console.log('cleaning folders');
  console.log('- cleaning dist folder');
  makeDirIfNotExists(config['dist-folder']);
  makeDirIfNotExists(path.join(config['dist-folder'], 'wordpress'));
  await cleanDistFolder(config['dist-folder']);

  console.log('- creating cache folder (if necessary) ');
  makeDirIfNotExists(config['cache-folder']);
  makeDirIfNotExists(config['cache-folder'] + '/wordpress');
  makeDirIfNotExists(config['cache-folder'] + '/plugins');
}


///////////////////
// WORDPRESS CORE

async function downloadWordPress(config) {
  console.log(''); // make some space in the log
  console.log('------------------------');
  console.log('downloading WordPress');
  console.log(''); // make some space in the log

  const latestVersion = await checkLatestWordPressVersion();
  await downloadAndExtractWordPressIfStale(config, latestVersion);
  copyWordPressFromCacheToDistFolder(config, latestVersion);
}

async function checkLatestWordPressVersion() {
  console.log('- finding the latest version of WordPress');
  var wordPressVersionApiUrl = 'https://api.wordpress.org/core/version-check/1.7/';
  console.log('  - checking [' + wordPressVersionApiUrl + ']');
  const response = await get(wordPressVersionApiUrl);

  console.log('  - got wordpress version response');

  var wordPressLatestVersionData = response.offers.find(offer => offer.response === 'upgrade');
  console.log('  - latest wordpress version is [' + wordPressLatestVersionData.version + ']');
  return wordPressLatestVersionData;
}

async function downloadAndExtractWordPressIfStale(config, latestVersion) {
  console.log('downloading / extracting WordPress (if stale)');
  const versionedPath = config['cache-folder'] + '/wordpress/' + latestVersion.version + '/';

  console.log('- checking if WordPress is stale - checking if folder [' + versionedPath + '] exists');
  if (!fs.existsSync(versionedPath)) {
    // Path doesn't exist - download and extract wordpress here
    console.log('  - WordPress is stale - downloading');

    const downloadUrl = latestVersion.packages.no_content;
    const downloadFile = config['cache-folder'] + '/wordpress/' + latestVersion.version + '.zip';
    console.log('  - downloading [' + downloadUrl + '] to [' + downloadFile + ']');
    await download(downloadUrl, downloadFile);
    console.log('  - download complete');

    console.log('  - extracting [' + downloadFile + '] to [' + versionedPath + ']');
    unzip(downloadFile, versionedPath);

  } else {
    console.log('  - WordPress is recent - nothing to download');
  }
}

function copyWordPressFromCacheToDistFolder(config, latestVersion) {
  console.log('copying WordPress from cache to dist folder');
  const versionedPath = config['cache-folder'] + '/wordpress/' + latestVersion.version + '/wordpress/.';
  copyFolder(versionedPath, config['dist-folder'] + '/wordpress/')
}


//////////////////////////////////////////////////
// PREPARE CONTENT FOLDER (FOR PLUGINS & THEMES)

function createWordPressContentFolders(config) {
  console.log('creating WordPress content folders');
  makeDirIfNotExists(config['dist-folder'] + '/wordpress/wp-content');
  makeDirIfNotExists(config['dist-folder'] + '/wordpress/wp-content/plugins');
  makeDirIfNotExists(config['dist-folder'] + '/wordpress/wp-content/themes');
}


///////////////////////
// PLUGINS (DOWNLOAD)

async function downloadPlugins(config) {
  console.log(''); // make some space in the log
  console.log('------------------------');
  console.log('downloading plugins');
  if (config['plugins-to-download'] && config['plugins-to-download'].plugins) {
    const plugins = config['plugins-to-download'].plugins;
    for (var i = 0; i < plugins.length; i++) {
      var plugin = plugins[i];
      await downloadPlugin(config, plugin.name)
    }
  }
}


async function downloadPlugin(config, pluginName) {
  console.log(''); // make some space in the log
  console.log('downloading plugin: ' + pluginName);
  const latestVersion = await checkLatestPluginVersion(pluginName);
  await downloadAndExtractPluginIfStale(config, pluginName, latestVersion);
  copyPluginFromCacheToDistFolder(config, pluginName, latestVersion);
}

async function checkLatestPluginVersion(pluginName) {
  console.log('- finding the latest version of plugin: ' + pluginName);
  var pluginApiUrl = 'https://api.wordpress.org/plugins/info/1.0/' + pluginName + '.json';
  console.log('  - checking [' + pluginApiUrl + ']');
  const response = await get(pluginApiUrl);

  console.log('  - got plugin version response');
  var pluginLatestVersionData = response;

  console.log('  - latest version of plugin [' + pluginName + '] is [' + pluginLatestVersionData.version + ']');
  return pluginLatestVersionData;
}

async function downloadAndExtractPluginIfStale(config, pluginName, latestVersion) {
  console.log('downloading / extracting plugin (if stale)');

  const pluginPath = config['cache-folder'] + '/plugins/' + pluginName;
  console.log('- creating cache folder (if necessary) [' + pluginPath + ']');
  makeDirIfNotExists(pluginPath);

  const versionedPath = pluginPath + '/' + latestVersion.version;
  console.log('- checking if plugin is stale - checking if folder [' + versionedPath + '] exists');
  if (!fs.existsSync(versionedPath)) {
    // Path doesn't exist - download and extract plugin here
    console.log('  - plugin is stale - downloading');

    const downloadUrl = latestVersion.download_link;
    const downloadFile = pluginPath + '/' + latestVersion.version + '.zip';
    console.log('  - downloading [' + downloadUrl + '] to [' + downloadFile + ']');
    await download(downloadUrl, downloadFile);
    console.log('  - download complete');

    console.log('  - extracting [' + downloadFile + '] to [' + versionedPath + ']');
    unzip(downloadFile, versionedPath);

  } else {
    console.log('  - plugin is recent - nothing to download');
  }
}

function copyPluginFromCacheToDistFolder(config, pluginName, latestVersion) {
  console.log('copying plugin [' + pluginName + '] from cache to dist folder');
  const versionedPath = config['cache-folder'] + '/plugins/' + pluginName + '/' + latestVersion.version + '/' + pluginName;
  const destinationFolder = config['dist-folder'] + '/wordpress/wp-content/plugins/';
  copyFolder(versionedPath, destinationFolder);
}


///////////////////
// PLUGINS (COPY)

async function copyPlugins(config) {
  console.log(''); // make some space in the log
  console.log('------------------------');
  console.log('copying plugins');

  if (config['plugins-to-copy'] && config['plugins-to-copy'].plugins) {
    const plugins = config['plugins-to-copy'].plugins;
    for (var i = 0; i < plugins.length; i++) {
      var plugin = plugins[i];
      await copyPlugin(config, plugin);
    }
  }
}

function copyPlugin(config, plugin) {
  console.log(''); // make some space in the log
  console.log('copying plugin: ' + plugin.name);

  switch (plugin.type) {
    case 'directory':
      console.log('- plugin is a directory');
      copyPluginFolder(config, plugin);
      break;
    case 'zip':
      console.log('- plugin is a zip file');
      extractPluginZipFile(config, plugin);
      break;
  }
}

function copyPluginFolder(config, plugin) {
  const sourceFolder = config['plugins-to-copy'].directory + '/' + plugin.directory;
  const destinationFolder = config['dist-folder'] + '/wordpress/wp-content/plugins';
  copyFolder(sourceFolder, destinationFolder);
}

function extractPluginZipFile(config, plugin) {
  const sourceFile = config['plugins-to-copy'].directory + '/' + plugin.filename;
  const destinationFolder = config['dist-folder'] + '/wordpress/wp-content/plugins';
  unzip(sourceFile, destinationFolder);
}


/////////////////
// CUSTOM THEME

function copyCustomTheme(config) {
  console.log(''); // make some space in the log
  console.log('------------------------');
  console.log('copying custom theme');
  console.log(''); // make some space in the log

  if (config['custom-theme'] && config['custom-theme'].directory) {
    const sourceFolder = config['custom-theme'].directory;
    const destinationFolder = config['dist-folder'] + '/wordpress/wp-content/themes';
    copyFolder(sourceFolder, destinationFolder);
  }
}

